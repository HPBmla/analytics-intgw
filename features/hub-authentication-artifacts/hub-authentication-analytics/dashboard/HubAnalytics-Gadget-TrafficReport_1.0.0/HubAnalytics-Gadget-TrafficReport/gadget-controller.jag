<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    response.contentType = 'application/json';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';

    var action = request.getParameter("action");
    var data = request.getContent();
    var providerConf = data[PROVIDER_CONF];


var log = new Log();



    var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');

    if (action === 'getSchema') {
        print(providerAPI.getSchema(providerConf));
        return;
    } else if(action === 'getData'){

        //Check logged in user role and decide which operators to load
        var allOperators = false;
        var currentOperator;
        var user = session.get('user');
        for (var i =0; i < user.roles.length; i++) {
            if (user.roles[i] == "admin") {
                allOperators = true;
                break;
            } else {
                var operator = /hub-(.*)-(publisher|viewer)/.exec(user.roles[i]);
                if (operator != undefined ) {
                    currentOperator = operator[1];
                } 
            }
        
        }

        if (providerConf[PROVIDER_NAME] == "batch") {

                    var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
                    var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(data.dateStart, data.dateEnd);

                    var tableName = providerConf.tableName + timeUnit;

                    providerConf.query = "eventTimeStamp:["+data.dateStart+" TO "+data.dateEnd+"]";

                    if (allOperators) {
                        if (data.operator.toLowerCase().trim() != "all") {
                            providerConf.query +=  " AND operatorId:"+ data.operator;
                        }
                    } else {
                        providerConf.query +=  " AND operatorId:"+ currentOperator;
                    }

                    if (data.serviceProvider.toLowerCase().trim() != "all") {
                        providerConf.query +=  " AND serviceProvider:"+ "\""+ data.serviceProvider+ "\"";
                    }

                    if (data.applicationName.toLowerCase().trim() != "all") {
                        providerConf.query +=  " AND applicationName:"+ data.applicationName;
                    }

                    if (data.api.toLowerCase().trim() != "all") {
                        providerConf.query +=  " AND api:"+ data.api;
                    }

                    providerConf.tableName = tableName;

        } else if(providerConf[PROVIDER_NAME] == "app") {
                if (data.serviceProvider.toLowerCase().trim() != "all") {
                    providerConf.query +=  "serviceProvider:"+ data.serviceProvider;
                }
        } else if (providerConf[PROVIDER_NAME] == "operator" && allOperators == false) {
            print([{"operatorId" : currentOperator}]);
            return;
        }

        print(providerAPI.getData(providerConf));
        return;
    }

}());


%>
