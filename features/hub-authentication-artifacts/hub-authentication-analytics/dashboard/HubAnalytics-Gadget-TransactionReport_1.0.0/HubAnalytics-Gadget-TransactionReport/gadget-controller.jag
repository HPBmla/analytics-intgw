<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    response.contentType = 'application/json';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';

    var action = request.getParameter("action");
    var filter = request.getParameter("filter");
    var data = request.getContent();
  
    var user = session.get('user');


    var log = new Log();


    if (action === 'getSchema') {
      var providerConf = data[PROVIDER_CONF];
    var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        print(providerAPI.getSchema(providerConf));
        return;
    } else if(action === 'getData'){
        var providerConf = data[PROVIDER_CONF];
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        //Check logged in user role and decide which operators to load
        var allOperators = false;
        var currentOperator;
        var user = session.get('user');

        log.info( "stringify user:"+ stringify(user));
        //----------------------------------------------------------------------------------------------
        if(filter === 'operators') {
        var db = new Database("AXIATA_MIFE_DB");
                var table = "operators";
                var resultOperators = [];

                try{
                        resultOperators = db.query("SELECT * FROM operators");
                        print(resultOperators);
                        return;
                }
                catch(e){ }
                finally{
                        db.close();
                }
        }
        //-------------------------------------------------------------------------------------------------

        if(filter === 'serviceprovider') {
                var db = new Database("AXIATA_MIFE_DB");
                var table = "operators";
                var resultServiceProviders = [];

                try{
                        resultServiceProviders = db.query("SELECT * FROM operators");
                        print(resultServiceProviders);
                        return;
                }
                catch(e){ }
                finally{
                        db.close();
                }
        }
        //----------------------------------------------------------------------------------------------------------

         if(filter === 'application') {
                 var db = new Database("AXIATA_MIFE_DB");
                 var table = "operators";
                 var resultApplications = [];

                 try{
                         resultApplications = db.query("SELECT * FROM operators");
                         print(resultApplications);
                         return;
                 }
                 catch(e){ }
                 finally{
                         db.close();
                 }
         }
         //------------------------------------------------------------------------------------------------------------


          if(filter === 'api') {
                 var db = new Database("AXIATA_MIFE_DB");
                 var table = "operators";
                 var resultAPI = [];

                 try{
                          resultAPI = db.query("SELECT * FROM operators");
                                  for (var i =0; i < resultAPI.length; i++) {
                                      log.info( "operators :"+ stringify(resultAPI[i]));

                                  }
                                  print(resultAPI);
                                  return;
                 }
                 catch(e){ }
                 finally{
                       db.close();
                 }
          }
          //------------------------------------------------------------------------------------------------------------


        for (var i =0; i < user.roles.length; i++) {
            if (user.roles[i] == "admin") {
                allOperators = true;
                break;
            } else {
                var operator = /hub-(.*)-(publisher|viewer)/.exec(user.roles[i]);
                if (operator != undefined ) {
                    currentOperator = operator[1];
                } 
            }
        
        }

        if (providerConf[PROVIDER_NAME] == "batch") {
                    providerConf.query = "responseTime:["+data.dateStart+" TO "+data.dateEnd+"]";

                    if (allOperators) {
                        if (data.operator.toLowerCase().trim() != "all") {
                            providerConf.query +=  " AND operatorId:"+ data.operator;
                        }
                    } else {
                        providerConf.query +=  " AND operatorId:"+ currentOperator;
                    }

                    if (data.serviceProvider.toLowerCase().trim() != "all") {
                        providerConf.query +=  " AND serviceProvider:"+ data.serviceProvider;
                    }

                    if (data.msisdn.toLowerCase().trim() != "") {
                        providerConf.query +=  " AND msisdn:"+ data.msisdn;
                    }

                    if (data.applicationName.toLowerCase().trim() != "all") {
                        providerConf.query +=  " AND applicationName:"+ data.applicationName;
                    }
        } else if(providerConf[PROVIDER_NAME] == "app") {
                if (data.serviceProvider.toLowerCase().trim() != "all") {
                    providerConf.query +=  "serviceProvider:"+ data.serviceProvider;
                }
        }  else if (providerConf[PROVIDER_NAME] == "operator" && allOperators == false) {
            print([{"operatorId" : currentOperator}]);
            return;
        }
        print(providerAPI.getData(providerConf));
        return;
    } else if (user != null) { 



                    var userReportDirectory = "/reports/transactions/"  + user.username+ "/";
                    var directory = "repository/deployment/server/jaggeryapps/portal/" + userReportDirectory;

                        if(action == "generate") {

                                        var carbon = require('carbon');
                var service = service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');




                var tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_PROCESSEDSTATISTICS";
                //var query = "responseCode:201";
                var reportMaxLength = 10;

                
                var providerConf = data[PROVIDER_CONF];
                var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
               

                var query = "responseTime:["+data.dateStart+" TO "+data.dateEnd+"]";

                if (data.operator.toLowerCase().trim() != "all") {
                   query +=  " AND operatorId:"+ data.operator;
                }

                if (data.serviceProvider.toLowerCase().trim() != "all") {
                    query +=  " AND serviceProvider:"+ data.serviceProvider;
                }

                if (data.api.toLowerCase().trim() != "all") {
                 log.info(data.api);
                    query +=  " AND api:" + data.api;
                }

                if (data.applicationName.toLowerCase().trim() != "all") {
                    query +=  " AND applicationName:"+ data.applicationName;
                }


                            var reportName =  directory + "transaction-report-" + new Date().getTime() ;
                            service.generateCSVReport(tableName, query, reportName, reportMaxLength);
                            print({'message':'Report is generating'});
                            return;

                        } else if (action == "available") {
                            var file = new File(userReportDirectory);
                            var files = [];
                            for(var i = 0; i < file.listFiles().length; i++) {
                                files[i] = {"name" : file.listFiles()[i].getName(), "index" : i };
                            }

                            print(files);
                            return;

                        } else if (action == "get" && request.getParameter("index") != null) {
                            var file = new File(userReportDirectory).listFiles()[request.getParameter("index")];
                            response.contentType = "application/octet-stream";  
                            response.addHeader("Content-Disposition", "attachment; filename="+ file.getName()); 
                             print(file.getStream());

                       } else if (action == "remove" && request.getParameter("index") != null) { 
                            var file = new File(userReportDirectory);
                            var result = file.listFiles()[request.getParameter("index")].del();
                            print({"fileDeleted":result});
                            return;
                       }

                      
        }

}());


%>
